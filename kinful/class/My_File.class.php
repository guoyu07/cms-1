<?php
/********************************************************/
/*****                 @!!@                          ****/
/********************************************************/
/**
 *@FileName : MY_file.class.php
 *@Author	: WangKilin
 *@Email	: wangkilin@126.com
 *@Date		: 2007-1-26
 *@Homepage	: http://www.kinful.com
 *@Version	: 0.1
 */
defined('Kinful') or die("forbidden");

class My_File
{
	/****************** START::property zone *************************/

    /**
     * @var string
     * License string for generating file information
     */
    const FILE_HEADER_LICENSE =
"#####################################################################################
##                                                                                 ##
##                    This file is generated by yeahEasy! system                   ##
##                                                                                 ##
##                               http://www.itnoon.com                             ##
##                              http://www.kinful.com                              ##
##                                Copyright@itnoon.com                             ##
##                                                                                 ##
##                                  Author:Wangkilin                               ##
##                                  wangkilin@126.com                              ##
##                 If you find any bug,please email me. Thank you!                  ##
##                               Let's do a better work!                           ##
#####################################################################################\n";



	/**
	 * @string	will store error information
	 */
	private $_errorStr = '';

	/**
	 *@resource	opening file handler
	 */
	private $_fileHandle;

	/**
	 *@string	set work directory
	 */
	private $_cwd;

	/**
	 *@string	root path
	 */
	private $_rootPath;

	/**
	 *@string	operating file name
	 */
	private $_fileName;

	/**
	 *@array	store files name which inlcude searching string
	 */
	private $_findFiles	=	array();

	/**
	 *@boolean	debug class
	 */
	public	$debug	=	false;

	/****************** END::property zone *************************/

	/****************** START::method zone *************************/

	/**
	 *@constructor : set root path.
	 */
	public function __construct($rootPath=MY_ROOT_PATH)
	{
		global $My_Lang;
		 My_Kernel::loadLang('class','file');//load class language
		$this->initialize();
		return;
	}

	/**
	 *@Description:	set dir path
	 *
	 *@param : string	set root path. this path will be user can be reach limitation
	 *
	 *@return: boolean
	 */
	public function setRootPath($rootPath)
	{
		global $My_Lang;
		$rootDir = trim($rootPath);
		if(!preg_match("/^\//", $rootDir) && !preg_match("/^\\\/", $rootDir) && !preg_match("/^[a-zA-Z]:/", $rootDir))
			$rootDir = MY_ROOT_PATH.$rootDir;
		$rootDir = realpath($rootDir);

		if(!@is_dir($rootDir))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["noSuchDir"].": $rootPath");
			return false;
		}

		if($_SESSION['system_admin'] != 1 && strpos(str_replace("/","\\",$_SERVER['DOCUMENT_ROOT']), $rootDir) !==0)
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["noPermSetRootPath"].": $rootPath");
			return false;
		}
		else
		{
			$this->_rootPath = $rootDir;
			return true;
		}

	}//END::function setRootPath

	/**
	 *@Description :	set work path as operating dir. then, all the file operation will be in this dir
	 *
	 *@param : dir name
	 *
	 *@return:	boolean
	 */
	public function setWorkPath ($path)
	{
		global $My_Lang;
		$dir = trim($path);
		if(!preg_match("/^\//", $dir) && !preg_match("/^\\\/", $dir) && !preg_match("/^[a-zA-Z]:/", $dir))
			$dir = $this->_rootPath."/".$dir;
		$dir=substr($dir, -1)=="\\"?$dir:(substr($dir, -1)=="/"?$dir:($dir."/"));
		$dir = realpath($dir);

		if(strpos($dir, $this->_rootPath) !==0)
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["noPermSetCwd"].": $path");
			return false;
		}
		elseif(!@is_dir($dir))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["noSuchDir"].": $path");
			return false;
		}
		else
		{
			$this->_cwd = $dir;
			return true;
		}
	}//END::function setPath

	/**
	 *@Description : write input string into file
	 *
	 *@param : resource	the file operating handler
	 *@param : string	the string will be put into file
	 *
	 *@return: boolean
	 */
	public function writeIntoFile(&$fileHandle, $putString='')
	{
		global $My_Lang;
		if(!is_resource($fileHandle))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["notSetFileHandle"]);
			return false;
		}

		if(!flock($fileHandle,LOCK_EX))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["lockFileFailed"]."....before writing file");
			return false;
		}

		if(!fwrite($fileHandle,$putString))
		{
			 $this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["writeFileFailed"]);
			 return false;
		}

		if(!flock($fileHandle,LOCK_UN))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["lockFileFailed"]."....after writing file");
			return false;
		}

		return true;
	}

	/**
	 *@Description : open file
	 *
	 *@param : string	the name of file that will be opened
	 *@param : string	method to open file.(w,r,a,b...);
	 *
	 *@return: resource/false
	 */
	public function openFile(&$fileName, $mode='r')
	{
		global $My_Lang;
		if(!$this->_isValidName($fileName))
		{//wrong file name
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileNameIsInvalid"].": $fileName. we can not open it.");
			return false;
		}

		if(!file_exists($this->_cwd."/".$fileName) && ($mode=='r' || $mode=='r+'))
		{// file does not exist
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileNotExists"].": $fileName");
			return false;
		}

		if(!in_array($mode, array("r", "r+", "rb", "w", "wb", "w+", "a", "a+", "x", "x+")))
		{// set wrong open mode
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["wrongMode"].": $mode");
			return false;
		}

		$fopen_succeed=@fopen($this->_cwd."/".$fileName, $mode);
		if(!$fopen_succeed)
		{//open file failed
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["openFileFailed"].": $fileName");
			return false;
		}
		else
		{
			$this->_fileHandle=&$fopen_succeed;
			return $this->_fileHandle;
		}
	}//END::function openFile

	/**
	 *@Description : check if file/dir name is valid
	 *
	 *@param : string	file/dir name
	 *
	 *@return: boolean
	 */
	private function _isValidName(&$fileName)
	{
		global $My_Lang;
		trim($fileName);
		if(preg_match("/\\|\//",$fileName))
			return false;

		return true;
	}//END::function _isValidName

	/**
	 *@Description : create new file
	 *
	 *@param : string	file name
	 *
	 *@return: resource(new file handler)/false
	 */
	public function &createFile($fileName)
	{
		global $My_Lang;
		/** check if is valid file name */
		if(!$this->_isValidName($fileName))
		{//wrong file name
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileNameIsInvalid"].": $fileName. we can not create it");
			return false;
		}

		/** check if file already exists */
		if(file_exists($this->_cwd."/$fileName"))
		{// file already exists
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileExists"].": $fileName.");
			return false;
		}

		/** create file */
		if(!$this->openFile($fileName,'w'))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["createFileFailed"].": $fileName.");
			return false;
		}

		return $this->_fileHandle;
	}//END::function createFile

	/**
	 *@Description : read file into array
	 *
	 *@param : string	file name
	 *
	 *@return: array
	 */
	public function &getFileIntoArray($fileName)
	{
		global $My_Lang;
		if(substr(trim($fileName), 0 ,7) != "http://" && substr($fileName, 0 ,8) != "https://")
		{//is local file
			/** check if is valid file name */
			if(!$this->_isValidName($fileName))
			{//wrong file name
				$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileNameIsInvalid"].": $fileName. we can not open it");
				return false;
			}

			/** check if file already exists */
			if(!file_exists($this->_cwd."/$fileName"))
			{// file already exists
				$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["fileNotExists"].": $fileName.");
				return false;
			}
		}

		if(($fileContentArray = @file($file_path))!==false)
			return $fileContentArray;
		else
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["getFileContentFailed"].": $fileName.");
			return false;
		}
	}//END::function getFileIntoArray

	/**
	 *@Description : read file into string
	 *
	 *@param : string	file name
	 *
	 *@return: array
	 */
	public function getFileIntoString(&$fileName)
	{
		global $My_Lang;
		if(($return = $this->getFileInfoArray($fileName))!==false)
			return join("\n",$return);
		else
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["getFileContentFailed"].": $fileName.");
			return false;
		}
	}//END::function getFileIntoString

	/**
	 *@Description : create new directory
	 *
	 *@param : string	dir name
	 *@param : string	with mode
	 *
	 *@return: boolean
	 */
	public function createDir(&$dirName,$mode='0744')
	{
		global $My_Lang;
		/** check if dir name is valid */
		if(substr(trim($dirName), -1)=="/" || substr($dirName, -1)=="\/" || !$this->_isValidName($dirName))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["dirNameIsInvalid"].": $dirName. we can not create it");
			return false;
		}

		/** check if mode if valid */
		$validMode = array("0","1","2","3","4","5","6","7");
		if(!in_array($mode[0], $validMode) || !in_array($mode[1], $validMode) || !in_array($mode[2], $validMode) || (isset($mode[3]) && !in_array($mode[3], $validMode)))
		{// set wrong open mode
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["wrongDirMode"].": $mode");
			return false;
		}

		if(!@mkdir($this->_cwd."/".$dirName,$mode))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["createDirFailed"].": $dirName");
			return $false;
		}

		return true;
	}//END::function createDir

	/**
	 *@Description : get currently work dir content
	 *
	 *@return: array
	 */
	public function getCwdContent()
	{
		global $My_Lang;
		if(!($dirHandler = @opendir($this->_cwd)))
		{
			$this->_errorStr = My_Kernel::createClassError( $My_Lang->class['file']["readDirFailed"].": $dirName");
			return $false;
		}
		$dirContent=array();
		while($itemInDir=readdir($dirHandler))
		{
			if($itemInDir =="." || $itemInDir ==".." )
				continue;
			$dirContent[]=$itemInDir;
		}

		return $dirContent;
	}//END::function getDirContent

	/**
	 *@Description : search string in files
	 *
	 *@param : string	searching string
	 *@param : int		deep level will search
	 *@param : string	where we will search. c-file content, n-file name, b-both c and n
	 *
	 *@return: array	including file name
	 */
	public function findFileIncludeString($searchString, $deepLevel=0, $where='c')
	{
	}//END::function findFileIncludeString

	/**
	 *@Description : get class error information
	 *
	 *@return: string
	 */
	public function getError()
	{
		return $this->_errorStr;
	}//END::function getError

	/**
	 *@Description : initialize class
	 *
	 *@return: void
	 */
	public function initialize()
	{
		clearstatcache();
		$this->setRootPath(MY_ROOT_PATH);
		$this->setWorkPath("./");
	}//END::function initialize


	/****************** END::method zone *************************/
}//END::class
?>
