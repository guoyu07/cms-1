<?php
/**
 * Streamwide adapter lastInsertId decorator.
 *
 * $Rev: 1954 $
 * $LastChangedDate: 2009-09-24 23:27:45 +0800 (Thu, 24 Sep 2009) $
 * $LastChangedBy: rgasler $
 *
 * @category   Streamwide
 * @package    Streamwide_Db
 * @copyright  Copyright (c) 2009 Streamwide SAS
 * @author     Stefan ALEXANDRU <salexandru@streamwide.ro>
 * @version    $Id: LastInsertId.php 1954 2009-09-24 15:27:45Z rgasler $
 */

class Streamwide_Db_Adapter_Decorator_LastInsertId extends Streamwide_Db_Adapter_Decorator_Abstract
{
    /**
     * Gets the last ID generated automatically by an IDENTITY/AUTOINCREMENT column.
     *
     * As a convention, on RDBMS brands that support sequences
     * (e.g. Oracle, PostgreSQL, DB2), this method forms the name of a sequence
     * from the arguments and returns the last id generated by that sequence.
     * On RDBMS brands that support IDENTITY/AUTOINCREMENT columns, this method
     * returns the last value generated for such a column, and the table name
     * argument is disregarded.
     *
     * @param string $tableName  (optional) Name of table.
     * @param string $primaryKey (optional) Name of primary key column.
     * @return string
     */
    public function lastInsertId( $tableName = null, $primaryKey = null )
    {
        if ( null === $tableName ) {
            return parent::lastInsertId( $tableName, $primaryKey );
        }
        
        $tableName = trim( $tableName );
        if ( empty( $tableName ) ) {
            require_once 'Streamwide/Db/Adapter/Decorator/Exception.php';
            throw new Streamwide_Db_Adapter_Decorator_Exception( __METHOD__ . ' requires parameter 1 to be a non empty string' );
        }
        
        try {
            if ( false === ( $sequence = $this->_getSequenceName( $tableName ) ) ) {
                return parent::lastInsertId( $tableName, $primaryKey );
            }
            return parent::lastSequenceId( $sequence );
        }
        catch ( Exception $e ) {
            return parent::lastInsertId( $tableName, $primaryKey );
        }
    }
}

/* EOF */